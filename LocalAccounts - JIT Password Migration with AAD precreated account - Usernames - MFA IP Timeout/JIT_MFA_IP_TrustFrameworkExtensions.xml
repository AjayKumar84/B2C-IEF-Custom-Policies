<?xml version="1.0" encoding="utf-8" ?>
<TrustFrameworkPolicy 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
  PolicySchemaVersion="0.3.0.0" 
  TenantId="b2cprod.onmicrosoft.com" 
  PolicyId="B2C_1A_JIT_MFA_IP_TrustFrameworkExtensions" 
  PublicPolicyUri="http://b2cprod.onmicrosoft.com/B2C_1A_JIT_MFA_IP_TrustFrameworkExtensions">

	<BasePolicy>
		<TenantId>b2cprod.onmicrosoft.com</TenantId>
		<PolicyId>B2C_1A_JIT_MFA_IP_TrustFrameworkBase</PolicyId>
	</BasePolicy>
	<BuildingBlocks>
		<ClaimsSchema>
			<ClaimType Id="extension_requiresMigration">
				<DisplayName>extension_requiresMigration</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>extension_requiresMigration</AdminHelpText>
				<UserHelpText>extension_requiresMigration</UserHelpText>
			</ClaimType>
			<ClaimType Id="tokenSuccess">
				<DisplayName>tokenSuccess</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>tokenSuccess</AdminHelpText>
				<UserHelpText>tokenSuccess</UserHelpText>
			</ClaimType>
			<ClaimType Id="migrationRequired">
				<DisplayName>migrationRequired</DisplayName>
				<DataType>string</DataType>
				<AdminHelpText>migrationRequired</AdminHelpText>
				<UserHelpText>migrationRequired</UserHelpText>
			</ClaimType>
		</ClaimsSchema>
		<ContentDefinitions>
			<ContentDefinition Id="api.phonefactor">
				<LoadUri>~/tenant/default/multifactor-1.0.0.cshtml</LoadUri>
				<RecoveryUri>~/common/default_page_error.html</RecoveryUri>
				<DataUri>urn:com:microsoft:aad:b2c:elements:multifactor:1.1.0</DataUri>
				<Metadata>
					<Item Key="DisplayName">Multi-factor authentication page</Item>
				</Metadata>
			</ContentDefinition>
		</ContentDefinitions>
	</BuildingBlocks>

	<ClaimsProviders>
		<ClaimsProvider>
			<DisplayName>Local Account SignIn</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="login-NonInteractive">
					<Metadata>
						<Item Key="client_id">a620b2dd-f55f-44bf-b6de-50689224c47f</Item>
						<!-- Native App -->
						<Item Key="IdTokenAudience">58734a70-edde-477e-b758-8fa132745e12</Item>
						<!-- Web Api -->
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="client_id" DefaultValue="a620b2dd-f55f-44bf-b6de-50689224c47f" />
						<InputClaim ClaimTypeReferenceId="resource_id" PartnerClaimType="resource" DefaultValue="58734a70-edde-477e-b758-8fa132745e12" />
					</InputClaims>
				</TechnicalProfile>

				<!--Checks requiresMigration flag on B2C user. True means the 
				user needs to set the password on first logon and validate legacy platform. --> 
				<TechnicalProfile Id="requiresMigration-LocalAccount-SignIn">
					<Metadata>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
						<Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="signInNames.emailAddress" Required="true" />
					</InputClaims>
					<OutputClaims>
						<!-- Required claims -->
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="extension_requiresMigration" DefaultValue="false" />
					</OutputClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>

				<!-- Calls REST API to call the legacy auth provider to validate the credentials when
						when requiresMigration = true -->
				<TechnicalProfile Id="LegacyProviderAuthenticationViaAPI">
					<DisplayName>Migrate user sign-up flow</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ServiceUrl">https://aadtob2cjitmigratepassword.azurewebsites.net/api/identity</Item>
						<Item Key="AuthenticationType">None</Item>
						<Item Key="SendClaimsIn">Body</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="email" />
						<InputClaim ClaimTypeReferenceId="password"/>
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="tokenSuccess" DefaultValue="false"/>
						<OutputClaim ClaimTypeReferenceId="migrationRequired"/>
					</OutputClaims>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>

				<!-- If the legacy provider successfully validated the users credentials
						write the password to the B2C account and change requiresMigration attribute to false -->
				<TechnicalProfile Id="AAD-WritePasswordAndFlipMigratedFlag">
					<Metadata>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<PersistedClaims>
						<!-- Required claims -->
						<PersistedClaim ClaimTypeReferenceId="objectId" />
						<PersistedClaim ClaimTypeReferenceId="password" PartnerClaimType="password"/>
						<PersistedClaim ClaimTypeReferenceId="migrationRequired" PartnerClaimType="extension_requiresMigration"/>
					</PersistedClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
				</TechnicalProfile>

				<!-- Logic for logging in the user with username (can retreive the user by username or email)-->
				<TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Username">
					<DisplayName>Local Account Signin</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="SignUpTarget">SignUpWithLogonUsernameExchange</Item>
						<Item Key="setting.operatingMode">Username</Item>
						<Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="signInName" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="extension_requiresMigration" />
						<OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
						<OutputClaim ClaimTypeReferenceId="password" Required="true" />
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" />
					</OutputClaims>
					<!-- Output the CurrentTime claim by running this Transformation -->
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="GetSystemDateTime" />
					</OutputClaimsTransformations>
					<ValidationTechnicalProfiles>
						<!-- Call the technical profile to check if the user requires migration -->
						<ValidationTechnicalProfile ReferenceId="requiresMigration-LocalAccount-SignIn" ContinueOnError="false" />
						<!-- If extension_requiresMigration = true, run LegacyProviderAuthenticationViaAPI
						 technical profile-->
						<ValidationTechnicalProfile ReferenceId="LegacyProviderAuthenticationViaAPI" ContinueOnError="false">
							<Preconditions>
								<Precondition Type="ClaimEquals" ExecuteActionsIf="false">
									<Value>extension_requiresMigration</Value>
									<Value>true</Value>
									<Action>SkipThisValidationTechnicalProfile</Action>
								</Precondition>
							</Preconditions>
						</ValidationTechnicalProfile>
						<!-- If tokenSuccess claim exists, run AAD-WritePasswordAndFlipMigratedFlag
						 technical profile-->
						<ValidationTechnicalProfile ReferenceId="AAD-WritePasswordAndFlipMigratedFlag" ContinueOnError="false">
							<Preconditions>
								<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
									<Value>tokenSuccess</Value>
									<Action>SkipThisValidationTechnicalProfile</Action>
								</Precondition>
							</Preconditions>
						</ValidationTechnicalProfile>
						<ValidationTechnicalProfile ReferenceId="login-NonInteractive" ContinueOnError="false"/>
					</ValidationTechnicalProfiles>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>

		<!-- Technical profile to enable MFA -->
		<ClaimsProvider>
			<DisplayName>PhoneFactor</DisplayName>
			<TechnicalProfiles>
				<TechnicalProfile Id="PhoneFactor-InputOrVerify">
					<DisplayName>PhoneFactor</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
						<Item Key="ManualPhoneNumberEntryAllowed">true</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
					</CryptographicKeys>
					<InputClaimsTransformations>
						<InputClaimsTransformation ReferenceId="CreateUserIdForMFA" />
					</InputClaimsTransformations>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="userIdForMFA" PartnerClaimType="UserId" />
						<InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
						<OutputClaim ClaimTypeReferenceId="newPhoneNumberEntered" PartnerClaimType="newPhoneNumberEntered" />
						<OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true"/>
					</OutputClaims>
				</TechnicalProfile>

				<TechnicalProfile Id="AAD-UserWritePhoneNumberUsingObjectId">
					<Metadata>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<PersistedClaims>
						<PersistedClaim ClaimTypeReferenceId="objectId" />
						<PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
					</PersistedClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>

				<!-- During password reset for a username based account, we must check that the email provided for 
				TOTP is the same as the one registered when the username was created. For email based accounts, we 
				check it is the same as the email that was provided at account creation -->
				<TechnicalProfile Id="LocalAccountDiscoveryUsingUserNameAndValidateStrongAuthenticationEmailAddress">
					<DisplayName>Reset password using username</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">api.localaccountpasswordchange1.1</Item>
						<Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
						<Item Key="UserMessageIfClaimsTransformationStringsAreNotEqual">An account could not be found for the provided user ID.</Item>
						<Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">Your account has been locked. Contact your support person to unlock it, then try again.</Item>
						<Item Key="LocalAccountType">Username</Item>
						<Item Key="LocalAccountProfile">true</Item>
						<!-- Reduce the default self-asserted retry limit of 7 for the reset journey -->
						<Item Key="setting.retryLimit">3</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
					</CryptographicKeys>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="userId" Required="true" />
						<OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="verified.Email" Required="true" />
						<OutputClaim ClaimTypeReferenceId="emails" />
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="userPrincipalName" />
						<OutputClaim ClaimTypeReferenceId="sub" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" />
						<OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
						<OutputClaim ClaimTypeReferenceId="displayName" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
					</OutputClaimsTransformations>
					<ValidationTechnicalProfiles>
						<ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingUserNameAndValidateStrongAuthenticationEmailAddress" />
					</ValidationTechnicalProfiles>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>

				<!-- Gets the email that was stored as part of the sign up of a username, or the email on the account
				and validates its the same one as when the account was registered-->
				<TechnicalProfile Id="AAD-UserReadUsingUserNameAndValidateStrongAuthenticationEmailAddress">
					<Metadata>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="userId" PartnerClaimType="logonIdentifier" Required="true" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="objectId" />
						<OutputClaim ClaimTypeReferenceId="accountEnabled" />
						<OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
						<OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="AssertEmailAndstrongAuthenticationEmailAddressAreEqual" />
						<OutputClaimsTransformation ReferenceId="AssertAccountEnabledIsTrue" />
						<OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="AAD-ReadCommon" />
				</TechnicalProfile>
				<TechnicalProfile Id="AAD-ReadCommon">
					<Metadata>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="userPrincipalName" />
						<OutputClaim ClaimTypeReferenceId="displayName" />
						<OutputClaim ClaimTypeReferenceId="otherMails" />
						<OutputClaim ClaimTypeReferenceId="signInNamesInfo.emailAddress" PartnerClaimType="logonIdentifier.emailAddress" />
						<OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="CreateEmailsFromOtherMailsAndSignInNamesInfo" />
						<OutputClaimsTransformation ReferenceId="AddStrongAuthenticationEmailToEmails" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>
				<TechnicalProfile Id="SelfAsserted-Input">
					<DisplayName>Self Asserted</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<Metadata>
						<Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
						<Item Key="TokenLifeTimeInSeconds">3600</Item>
						<Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
					</Metadata>
					<CryptographicKeys>
						<Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
					</CryptographicKeys>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
						<!-- Note: Claims such as emails are not listed here because without a ValidationTechnicalProfile when SelfAsserted-Input is shown to the user,               the user will be prompted for such claims. As a result, that claim is kept in the technical profiles that have ValidationTechnicalProfile -->
					</OutputClaims>
					<UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
				</TechnicalProfile>

				<!-- Writes the current logon attempts IP address to the user and the currentTime
					to record when the user last did MFA (this step only triggers when the user did MFA)-->
				<TechnicalProfile Id="AAD-UserWriteIPUsingObjectId">
					<Metadata>
						<Item Key="Operation">Write</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<PersistedClaims>
						<PersistedClaim ClaimTypeReferenceId="objectId" />
						<PersistedClaim ClaimTypeReferenceId="IP-Address" PartnerClaimType="extension_IP" />
						<PersistedClaim ClaimTypeReferenceId="CurrentTime" PartnerClaimType="extension_LastMFATime" />
					</PersistedClaims>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>

				<!-- Reads the IP from which the user last logged in with
						And the last time which they performed MFA -->
				<TechnicalProfile Id="AAD-UserReadStoredIP">
					<Metadata>
						<Item Key="Operation">Read</Item>
						<Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
					</Metadata>
					<IncludeInSso>false</IncludeInSso>
					<InputClaims>
						<InputClaim ClaimTypeReferenceId="objectId" Required="true" />
					</InputClaims>
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="extension_IP" DefaultValue="noIP"/>
						<OutputClaim ClaimTypeReferenceId="CurrentTime" />
						<OutputClaim ClaimTypeReferenceId="extension_LastMFATime" DefaultValue="2018-10-01T15:00:00.0000000Z" />
					</OutputClaims>
					<OutputClaimsTransformations>
						<OutputClaimsTransformation ReferenceId="IsLoginFromLastRecordedIP" />
						<OutputClaimsTransformation ReferenceId="CompareTimetoLastMFATime" />
					</OutputClaimsTransformations>
					<IncludeTechnicalProfile ReferenceId="AAD-Common" />
				</TechnicalProfile>

				<!-- Outputs the IP-Address claim which contains the IP address the current logon
							is from -->
				<TechnicalProfile Id="SimpleUJContext">
					<DisplayName>User Journey Context Provide</DisplayName>
					<Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.UserJourneyContextProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
					<OutputClaims>
						<OutputClaim ClaimTypeReferenceId="IP-Address" />
					</OutputClaims>
				</TechnicalProfile>
			</TechnicalProfiles>
		</ClaimsProvider>
	</ClaimsProviders>

	<UserJourneys>
		<UserJourney Id="SignUpOrSignInUsernameOrEmail">
			<OrchestrationSteps>

				<!-- Get the logon IP-->
				<OrchestrationStep Order="1" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="UserJourneyContext" TechnicalProfileReferenceId="SimpleUJContext" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Present the sign in page -->
				<OrchestrationStep Order="2" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signuporsignin">
					<ClaimsProviderSelections>
						<ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountSigninEmailExchange" />
					</ClaimsProviderSelections>
					<ClaimsExchanges>
						<ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>objectId</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- This step reads any user attributes that we may not have received when in the token. -->
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Read the last logon IP and last MFA time -->
				<OrchestrationStep Order="5" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadStoredIP" TechnicalProfileReferenceId="AAD-UserReadStoredIP" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Phone verification:
             This step checks whether there's a phone number on record,  for the user. If found, 
						 then the user is challenged to verify it. 
						 
						 This step only occurs if the user hasnt already just done MFA or the IP is not the same
						 as when the user last did MFA (last logon)-->
				<OrchestrationStep Order="6" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>SameIPAddress</Value>
							<Value>True</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="PhoneFactor-Verify1" TechnicalProfileReferenceId="PhoneFactor-InputOrVerify" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!--This step only occurs if the last time the user did MFA was over the absolute time window-->
				<OrchestrationStep Order="7" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="true">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
						<Precondition Type="ClaimEquals" ExecuteActionsIf="true">
							<Value>isLastMFATimeGreaterThanWindow</Value>
							<Value>False</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="PhoneFactor-Verify2" TechnicalProfileReferenceId="PhoneFactor-InputOrVerify" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- Save MFA phone number: The precondition verifies whether the user provided a new number in the 
             previous step. If so, then the phone number is stored in the directory for future authentication 
             requests. -->
				<OrchestrationStep Order="8" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>newPhoneNumberEntered</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWritePhoneNumberUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<!-- If the user just performed MFA, record the IP and stamp the current time on the user 
			as to indicate when MFA was last performed -->
				<OrchestrationStep Order="9" Type="ClaimsExchange">
					<Preconditions>
						<Precondition Type="ClaimsExist" ExecuteActionsIf="false">
							<Value>isActiveMFASession</Value>
							<Action>SkipThisOrchestrationStep</Action>
						</Precondition>
					</Preconditions>
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserWriteIPUsingObjectId" TechnicalProfileReferenceId="AAD-UserWriteIPUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>

				<OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />

			</OrchestrationSteps>
			<ClientDefinition ReferenceId="DefaultWeb" />
		</UserJourney>

		<UserJourney Id="PasswordResetWithUsername">
			<OrchestrationSteps>
				<OrchestrationStep Order="1" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="test" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingUserNameAndValidateStrongAuthenticationEmailAddress" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="NewCredentials" TechnicalProfileReferenceId="LocalAccountWritePasswordUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
			</OrchestrationSteps>
			<ClientDefinition ReferenceId="DefaultWeb" />
		</UserJourney>
		<UserJourney Id="ProfileEditWithUsername">
			<OrchestrationSteps>
				<OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
					<ClaimsProviderSelections>
						<ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountSigninUsernameExchange" />
					</ClaimsProviderSelections>
				</OrchestrationStep>
				<OrchestrationStep Order="2" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="LocalAccountSigninUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="3" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="4" Type="ClaimsExchange">
					<ClaimsExchanges>
						<ClaimsExchange Id="B2CUserProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ProfileUpdate" />
					</ClaimsExchanges>
				</OrchestrationStep>
				<OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
			</OrchestrationSteps>
			<ClientDefinition ReferenceId="DefaultWeb" />
		</UserJourney>
	</UserJourneys>
</TrustFrameworkPolicy> 
